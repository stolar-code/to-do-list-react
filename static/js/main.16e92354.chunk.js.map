{"version":3,"sources":["App/features/tasks/tasksSlice.js","App/features/tasks/Form/styled.js","App/features/tasks/Form/index.js","App/features/tasks/TaskList/styled.js","App/features/tasks/TaskList/index.js","App/features/tasks/Buttons/styled.js","App/features/tasks/Buttons/index.js","App/common/Section/styled.js","App/common/Section/index.js","App/common/Header/index.js","App/common/Container/styled.js","App/common/Container/index.js","App/features/tasks/Tasks.js","App/App.js","reportWebVitals.js","App/GlobalStyle.js","App/features/tasks/getExampleTasks.js","App/features/tasks/tasksSaga.js","App/rootSaga.js","App/store.js","index.js","App/theme.js"],"names":["tasksSlice","createSlice","name","initialState","tasks","hideDone","reducers","addTask","payload","push","toggleHideDone","state","toggleTaskDone","index","findIndex","id","done","deleteAllTasks","markAllAsDone","forEach","task","removeTask","splice","fetchExampleTasks","setTasks","actions","selectTasksState","selectTasks","selectHideDone","selectIsEveryTaskDone","every","selectAreTasksEmpty","length","StyledForm","styled","form","theme","breakpoints","mobile","Input","input","colors","borderColor","Button","button","main","Form","useState","newTaskContent","setNewTaskContent","inputRef","useRef","dispatch","useDispatch","onSubmit","event","preventDefault","trimmedNewTaskContent","trim","content","nanoid","current","focus","ref","placeholder","value","onChange","target","Tasks","ul","Item","li","hidden","css","toggleDone","remove","Content","span","TaskList","useSelector","map","onClick","title","Wrapper","div","disabled","Buttons","areTasksEmpty","isEveryTaskDone","StyledSection","section","backgroundPrimary","Container","SubHeaderTitle","h2","Section","extraHeaderContent","body","Header","StyledContainer","children","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","GlobalStyle","createGlobalStyle","getExampleTasks","a","fetch","response","ok","Error","statusText","json","fetchExampleTasksHandler","watchFetchExampleTasks","call","exampleTasks","put","alert","takeLatest","type","rootSaga","all","sagaMiddleware","createSagaMiddleware","store","configureStore","reducer","tasksReducer","middleware","run","ReactDOM","render","StrictMode","backgroundSecondary","document","getElementById"],"mappings":"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","file":"static/js/main.16e92354.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst tasksSlice = createSlice({\r\n    name: 'tasks',\r\n    initialState: {\r\n        tasks: [],\r\n        hideDone: false,\r\n    },\r\n    reducers: {\r\n        addTask: ({ tasks }, { payload }) => {\r\n            tasks.push(payload);\r\n        },\r\n        toggleHideDone: state => {\r\n            state.hideDone = !state.hideDone;\r\n        },\r\n        toggleTaskDone: ({ tasks }, { payload }) => {\r\n            const index = tasks.findIndex(({ id }) => id === payload);\r\n            tasks[index].done = !tasks[index].done;\r\n        },\r\n        deleteAllTasks: state => {\r\n            state.tasks = [];\r\n        },\r\n        markAllAsDone: ({ tasks }) => {\r\n            tasks.forEach(task => task.done = true);\r\n        },\r\n        removeTask: ({ tasks }, { payload }) => {\r\n            const index = tasks.findIndex(({ id }) => id === payload);\r\n            tasks.splice(index, 1);\r\n        },\r\n        fetchExampleTasks: () => {\r\n\r\n        },\r\n        setTasks: (state, { payload: tasks }) => {\r\n            state.tasks = tasks;\r\n        },\r\n    },\r\n});\r\n\r\nexport const {\r\n    addTask,\r\n    toggleHideDone,\r\n    toggleTaskDone,\r\n    deleteAllTasks,\r\n    markAllAsDone,\r\n    removeTask,\r\n    fetchExampleTasks,\r\n    setTasks,\r\n} = tasksSlice.actions;\r\n\r\nexport const selectTasksState = state => state.tasks;\r\n\r\nexport const selectTasks = state => selectTasksState(state).tasks;\r\nexport const selectHideDone = state => selectTasksState(state).hideDone;\r\nexport const selectIsEveryTaskDone = state => selectTasks(state).every(({ done }) => done);\r\nexport const selectAreTasksEmpty = state => selectTasks(state).length === 0;\r\n\r\nexport default tasksSlice.reducer;","import styled from \"styled-components\";\r\n\r\nexport const StyledForm = styled.form`\r\n    display: grid;\r\n    grid-template-columns: 1fr auto;\r\n    grid-gap: 10px;\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoints.mobile}px) {\r\n        grid-template-columns: 1fr;\r\n    }\r\n`;\r\n\r\nexport const Input = styled.input`\r\n    border: 2px solid ${({ theme }) => theme.colors.borderColor};\r\n    padding: 10px;\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    cursor: pointer;\r\n    border: none;\r\n    color: white;\r\n    background-color: ${({ theme }) => theme.colors.main};;\r\n    padding: 10px 15px;\r\n    transition: filter 0.3s, transform 0.3s;\r\n\r\n    &:hover {\r\n        filter: brightness(1.1);\r\n    }\r\n\r\n    &:active {\r\n        filter: brightness(1.2);\r\n        transform: scale(1.05);\r\n    }\r\n`;","import { nanoid } from \"@reduxjs/toolkit\";\r\nimport React, { useState, useRef } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { addTask } from \"../tasksSlice\";\r\nimport { Button, Input, StyledForm } from \"./styled\";\r\n\r\nconst Form = () => {\r\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n    const inputRef = useRef(null)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n        const trimmedNewTaskContent = newTaskContent.trim();\r\n\r\n        if (trimmedNewTaskContent) {\r\n\r\n            dispatch(addTask({\r\n                content: trimmedNewTaskContent,\r\n                done: false,\r\n                id: nanoid(),\r\n            }))\r\n\r\n            setNewTaskContent(\"\");\r\n            inputRef.current.focus()\r\n        };\r\n    };\r\n\r\n    return (\r\n        <StyledForm onSubmit={onFormSubmit}>\r\n            <Input\r\n                ref={inputRef}\r\n                placeholder=\"What should I do today?\"\r\n                value={newTaskContent}\r\n                onChange={({ target }) => setNewTaskContent(target.value)} />\r\n            <Button>\r\n                Add task\r\n            </Button>\r\n        </StyledForm>\r\n    )\r\n};\r\n\r\nexport default Form;","import styled, { css } from \"styled-components\";\r\n\r\nexport const Tasks = styled.ul`\r\n    list-style: none;\r\n    margin: 0;\r\n    padding: 0;\r\n`;\r\n\r\nexport const Item = styled.li`\r\n    display: grid;\r\n    grid-template-columns: auto 1fr auto;\r\n    grid-gap: 20px;\r\n    padding: 20px;\r\n    align-items: center;\r\n    border-bottom: 1px solid ${({ theme }) => theme.colors.borderColor};\r\n\r\n    ${({ hidden }) => hidden && css`\r\n        display: none;\r\n    `}\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    cursor: pointer;\r\n    border: none;\r\n    line-height: 50%;\r\n    padding: 5px;\r\n    background-color: inherit;\r\n    color: ${({ theme }) => theme.colors.main};\r\n    transition: color 0.2s, filter 0.2s;\r\n\r\n    ${({ toggleDone }) => toggleDone && css`\r\n        color: #fefefe;\r\n        background-color: ${({ theme }) => theme.colors.main};\r\n\r\n        &:hover {\r\n        filter: brightness(1.1);\r\n        }\r\n    `};\r\n\r\n    ${({ remove }) => remove && css`\r\n        color: crimson;\r\n    `}\r\n`;\r\n\r\nexport const Content = styled.span`\r\n    overflow-wrap: anywhere;\r\n\r\n    ${({ done }) => done && css`\r\n        text-decoration: line-through;\r\n    `}\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoints.mobile}px) {\r\n        justify-self: center;\r\n    }\r\n`;\r\n\r\n","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { FaCheck, FaTimes } from \"react-icons/fa\";\r\nimport { Content, Item, Button, Tasks } from \"./styled\";\r\nimport { selectTasks, toggleTaskDone, removeTask, selectHideDone } from \"../tasksSlice\";\r\n\r\nconst TaskList = () => {\r\n    const tasks = useSelector(selectTasks);\r\n    const hideDone = useSelector(selectHideDone);\r\n    \r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <Tasks>\r\n            {tasks.map(task => (\r\n                <Item\r\n                    key={task.id}\r\n                    hidden={task.done && hideDone}\r\n                >\r\n                    <Button\r\n                        toggleDone={task.done}\r\n                        onClick={() => dispatch(toggleTaskDone(task.id))}>\r\n                        <FaCheck title=\"check mark\" />\r\n                    </Button>\r\n                    <Content\r\n                        done={task.done}>\r\n                        {task.content}\r\n                    </Content>\r\n                    <Button\r\n                        remove\r\n                        onClick={() => dispatch(removeTask(task.id))}>\r\n                        <FaTimes title=\"cross mark\" />\r\n                    </Button>\r\n                </Item>\r\n            ))}\r\n        </Tasks>\r\n    )\r\n};\r\n\r\nexport default TaskList;","import styled, { css } from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n    @media (max-width: ${({ theme }) => theme.breakpoints.mobile}px) {\r\n        display: flex;\r\n        flex-direction: column; \r\n    }\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    margin: 15px;\r\n    align-self: center;\r\n    cursor: pointer;\r\n    border: none;\r\n    color: teal;\r\n    background-color: inherit;\r\n    transition: color 0.2s;\r\n\r\n    ${({ disabled }) => disabled && css`\r\n        color: #acacac;\r\n        cursor: default;\r\n    `}\r\n`;","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { Wrapper, Button } from \"./styled\";\r\nimport {\r\n    toggleHideDone,\r\n    deleteAllTasks,\r\n    markAllAsDone,\r\n    selectAreTasksEmpty,\r\n    selectHideDone,\r\n    selectIsEveryTaskDone,\r\n    fetchExampleTasks\r\n} from \"../../tasks/tasksSlice\";\r\n\r\nconst Buttons = () => {\r\n    const areTasksEmpty = useSelector(selectAreTasksEmpty);\r\n    const hideDone = useSelector(selectHideDone);\r\n    const isEveryTaskDone = useSelector(selectIsEveryTaskDone);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <Wrapper>\r\n            <Button\r\n                onClick={() => dispatch(fetchExampleTasks())}\r\n            >\r\n                Download sample tasks\r\n            </Button>\r\n            {!areTasksEmpty && (\r\n                <>\r\n                    <Button\r\n                        onClick={() => dispatch(toggleHideDone())}\r\n                    >\r\n                        {hideDone ? \"Show done tasks\" : \"Hide done tasks\"}\r\n                    </Button>\r\n                    <Button\r\n                        onClick={() => dispatch(markAllAsDone())}\r\n                        disabled={isEveryTaskDone}\r\n                    >\r\n                        Mark all as done\r\n                    </Button>\r\n                    <Button\r\n                        onClick={() => dispatch(deleteAllTasks())}\r\n                    >\r\n                        Delete all\r\n                </Button>\r\n                </>\r\n            )}\r\n        </Wrapper>\r\n    );\r\n};\r\n\r\nexport default Buttons;","import styled from \"styled-components\";\r\n\r\nexport const StyledSection = styled.section`\r\n    background-color: ${({theme}) => theme.colors.backgroundPrimary};;\r\n    box-shadow: 0 0 10px 0 #d3d2d2;\r\n    margin: 10px 0;\r\n`;\r\n\r\nexport const Container = styled.div`\r\n    display: grid;\r\n    grid-template-columns: auto auto;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n\r\n    @media (max-width: ${({theme}) => theme.breakpoints.mobile}px) {\r\n        grid-template-columns: 1fr;\r\n    }\r\n`;\r\n\r\nexport const SubHeaderTitle = styled.h2`\r\n    margin: 0;\r\n    padding: 25px;\r\n`;\r\n\r\nexport const Wrapper = styled.div`\r\n    padding: 25px;\r\n    border-top: 3px solid ${({theme}) => theme.colors.borderColor};;\r\n`;","import React from \"react\";\r\nimport { Container, StyledSection, SubHeaderTitle, Wrapper } from \"./styled\";\r\n\r\nconst Section = ({ title, extraHeaderContent, body }) => (\r\n    <StyledSection>\r\n        <Container>\r\n            <SubHeaderTitle>\r\n                {title}\r\n            </SubHeaderTitle>\r\n            {extraHeaderContent}\r\n        </Container>\r\n        <Wrapper>\r\n            {body}\r\n        </Wrapper>\r\n    </StyledSection>\r\n);\r\n\r\nexport default Section;\r\n","import React from \"react\";\r\n\r\nconst Header = ({title}) => (\r\n    <header>\r\n        <h1>{title}</h1>\r\n    </header>\r\n);\r\n\r\nexport default Header;","import styled from \"styled-components\";\r\n\r\nexport const StyledContainer = styled.main`\r\n    max-width: 1200px;\r\n    padding: 0 10px;\r\n    margin: 0 auto;\r\n`;","import React from \"react\";\r\nimport { StyledContainer } from \"./styled\";\r\n\r\nconst Container = ({ children }) => (\r\n    <StyledContainer>\r\n        {children}\r\n    </StyledContainer>\r\n);\r\n\r\nexport default Container;","import React from \"react\";\r\nimport Form from \"./Form\";\r\nimport TaskList from \"./TaskList\";\r\nimport Buttons from \"./Buttons\";\r\nimport Section from \"../../common/Section\";\r\nimport Header from \"../../common/Header\";\r\nimport Container from \"../../common/Container\";\r\n\r\nfunction Tasks() {\r\n\r\n  return (\r\n    <Container>\r\n      <Header title=\"To-do List\" />\r\n      <Section\r\n        title=\"Add new task\"\r\n        body={<Form />}\r\n      />\r\n      <Section\r\n        title=\"Task List\"\r\n        body={<TaskList />}\r\n        extraHeaderContent={<Buttons />}\r\n      />\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Tasks;\r\n","import React from \"react\";\r\nimport Tasks from \"./features/tasks/Tasks\";\r\n\r\nconst App = () => <Tasks />\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    html {\r\n        box-sizing: border-box;\r\n    }\r\n\r\n    *,\r\n    *::before,\r\n    *::after {\r\n        box-sizing: inherit;\r\n    }\r\n\r\n    body {\r\n        font-family: 'Montserrat', sans-serif;\r\n        background: #EEEEEE;\r\n    }\r\n`;","export const getExampleTasks = async () => {\r\n    const response = await fetch(\"/to-do-list-react/exampleTasks.json\")\r\n\r\n    if (!response.ok) {\r\n        new Error(response.statusText);\r\n    }\r\n\r\n    return await response.json();\r\n};","import { takeLatest, call, put } from \"redux-saga/effects\";\r\nimport { getExampleTasks } from \"./getExampleTasks\";\r\nimport { fetchExampleTasks, setTasks } from \"./tasksSlice\";\r\n\r\nfunction* fetchExampleTasksHandler() {\r\n    try {\r\n        const exampleTasks = yield call(getExampleTasks);\r\n        yield put(setTasks(exampleTasks));\r\n    } catch (error) {\r\n        yield call(alert, \"Something went wrong!\")\r\n    };\r\n};\r\n\r\nexport function* watchFetchExampleTasks() {\r\n    yield takeLatest(fetchExampleTasks.type, fetchExampleTasksHandler);\r\n};","import { all } from \"redux-saga/effects\";\r\nimport { watchFetchExampleTasks } from \"./features/tasks/tasksSaga\";\r\n\r\nexport default function* rootSaga() {\r\n    yield all([\r\n        watchFetchExampleTasks(),\r\n    ])\r\n};","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport tasksReducer from \"./features/tasks/tasksSlice\";\r\nimport rootSaga from \"./rootSaga\";\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        tasks: tasksReducer,\r\n    },\r\n    middleware: [sagaMiddleware]\r\n});\r\n\r\nsagaMiddleware.run(rootSaga);\r\n\r\nexport default store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { ThemeProvider } from \"styled-components\";\r\nimport { theme } from \"./App/theme\";\r\nimport { GlobalStyle } from \"./App/GlobalStyle\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./App/store\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <ThemeProvider theme={theme}>\r\n        <GlobalStyle />\r\n        <App />\r\n      </ThemeProvider>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","export const theme = {\r\n    colors: {\r\n        main: \"hsl(180, 100%, 25%)\",\r\n        backgroundPrimary: \"hsl(0, 0%, 100%)\",\r\n        backgroundSecondary: \"hsl(0, 0%, 93%)\",\r\n        borderColor: \"hsl(270, 6%, 93%)\",\r\n    },\r\n\r\n    breakpoints: {\r\n        mobile: 767,\r\n    },\r\n};"],"sourceRoot":""}