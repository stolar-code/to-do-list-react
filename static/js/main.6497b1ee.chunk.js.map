{"version":3,"sources":["App/common/Section/styled.js","App/common/Section/index.js","App/common/Header/styled.js","App/common/Header/index.js","App/common/Container/styled.js","App/common/Container/index.js","App/features/author/AuthorPage.js","App/features/tasks/tasksStateLocalStorage.js","App/features/tasks/tasksSlice.js","App/features/tasks/TasksPage/Input/index.js","App/features/tasks/TasksPage/Form/styled.js","App/features/tasks/TasksPage/Form/index.js","App/features/tasks/TasksPage/TaskList/styled.js","App/features/tasks/TasksPage/searchQueryParamName.js","App/routes.js","App/features/tasks/TasksPage/queryParameters.js","App/features/tasks/TasksPage/TaskList/index.js","App/features/tasks/TasksPage/Buttons/styled.js","App/features/tasks/TasksPage/Buttons/index.js","App/features/tasks/TasksPage/Search/styled.js","App/features/tasks/TasksPage/Search/index.js","App/features/tasks/TasksPage/index.js","App/features/tasks/TaskPage/index.js","App/Navigation/styled.js","App/Navigation/index.js","App/App.js","reportWebVitals.js","App/GlobalStyle.js","App/features/tasks/getExampleTasks.js","App/features/tasks/tasksSaga.js","App/rootSaga.js","App/store.js","index.js","App/theme.js"],"names":["StyledSection","styled","section","theme","colors","sectionBackground","Container","div","breakpoints","mobileMax","SubHeaderTitle","h2","subHeader","Wrapper","border","Section","title","extraHeaderContent","body","StyledHeader","h1","header","Header","StyledContainer","main","children","AuthorPage","localStorageTasks","localStorageHideDone","saveTasksStateInLocalStorage","tasks","hideDone","localStorage","setItem","JSON","stringify","tasksSlice","createSlice","name","initialState","parse","getItem","loading","reducers","addTask","payload","push","toggleHideDone","state","toggleTaskDone","index","findIndex","id","done","deleteAllTasks","markAllAsDone","forEach","task","removeTask","splice","fetchExampleTasks","setTasks","setLoadingExampleTasks","actions","selectTasksState","selectTasks","selectHideDone","selectIsEveryTaskDone","every","selectAreTasksEmpty","length","selectLoading","Input","input","StyledForm","form","Button","button","Form","useState","newTaskContent","setNewTaskContent","inputRef","useRef","dispatch","useDispatch","onSubmit","event","preventDefault","trimmedNewTaskContent","trim","content","nanoid","current","focus","ref","placeholder","value","onChange","target","Tasks","ul","Item","li","hidden","css","toggleDone","remove","Content","ItemContent","span","StyledLink","Link","links","searchQueryParamName","toTask","useQueryParameters","key","location","useLocation","URLSearchParams","search","get","TaskList","query","useSelector","filter","toUpperCase","includes","selectTasksByQuery","areTasksEmpty","map","onClick","to","disabled","Loading","Buttons","isEveryTaskDone","stateOfLoading","Search","replaceQueryParameters","history","useHistory","searchParams","undefined","delete","set","newSearch","toString","pathname","useReplaceQueryParameters","TasksPage","TaskPage","useParams","taskId","find","getTaskById","activeClassName","StyledNavLink","NavLink","attrs","navigation","List","ListItem","Navigation","exact","App","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","GlobalStyle","createGlobalStyle","mainBackground","getExampleTasks","a","fetch","response","ok","Error","statusText","json","fetchExampleTasksHandler","saveTasksStateInLocalStorageHandler","tasksSaga","put","delay","call","exampleTasks","alert","select","takeLatest","type","takeEvery","rootSaga","all","sagaMiddleware","createSagaMiddleware","store","configureStore","reducer","tasksReducer","middleware","run","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6497b1ee.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const StyledSection = styled.section`\r\n    background-color: ${({ theme }) => theme.colors.sectionBackground};\r\n    margin: 10px 0;\r\n`;\r\n\r\nexport const Container = styled.div`\r\n    display: grid;\r\n    grid-template-columns: auto auto;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoints.mobileMax}px) {\r\n        grid-template-columns: 1fr;\r\n    }\r\n`;\r\n\r\nexport const SubHeaderTitle = styled.h2`\r\n    color: ${({ theme }) => theme.colors.subHeader};\r\n    margin: 0;\r\n    padding: 25px;\r\n`;\r\n\r\nexport const Wrapper = styled.div`\r\n    padding: 25px;\r\n    border-top: 3px solid ${({ theme }) => theme.colors.border};\r\n`;","import React from \"react\";\r\nimport { Container, StyledSection, SubHeaderTitle, Wrapper } from \"./styled\";\r\n\r\nconst Section = ({ title, extraHeaderContent, body }) => (\r\n    <StyledSection>\r\n        <Container>\r\n            <SubHeaderTitle>\r\n                {title}\r\n            </SubHeaderTitle>\r\n            {extraHeaderContent}\r\n        </Container>\r\n        <Wrapper>\r\n            {body}\r\n        </Wrapper>\r\n    </StyledSection>\r\n);\r\n\r\nexport default Section;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledHeader = styled.h1`\r\n    color: ${({ theme }) => theme.colors.header};\r\n    font-size: 42px;\r\n`;","import React from \"react\";\r\nimport { StyledHeader } from \"./styled\";\r\n\r\nconst Header = ({ title }) => (\r\n    <StyledHeader>\r\n        {title}\r\n    </StyledHeader>\r\n);\r\n\r\nexport default Header;","import styled from \"styled-components\";\r\n\r\nexport const StyledContainer = styled.main`\r\n    max-width: 1100px;\r\n    padding: 0 10px 20px;\r\n    margin: 0 auto;\r\n`;","import React from \"react\";\r\nimport { StyledContainer } from \"./styled\";\r\n\r\nconst Container = ({ children }) => (\r\n    <StyledContainer>\r\n        {children}\r\n    </StyledContainer>\r\n);\r\n\r\nexport default Container;","import React from \"react\";\r\nimport Section from \"../../common/Section\";\r\nimport Header from \"../../common/Header\";\r\nimport Container from \"../../common/Container\";\r\n\r\nconst AuthorPage = () => (\r\n    <Container>\r\n        <Header title=\"About author\" />\r\n        <Section\r\n            title=\"name surname\"\r\n            body={\"something\"}\r\n        />\r\n    </Container>\r\n);\r\n\r\nexport default AuthorPage;","const localStorageTasks = \"tasks\";\r\nconst localStorageHideDone = \"hideDone\";\r\n\r\nexport const saveTasksStateInLocalStorage = (tasks, hideDone) => {\r\n    localStorage.setItem(localStorageTasks, JSON.stringify(tasks));\r\n    localStorage.setItem(localStorageHideDone, JSON.stringify(hideDone));\r\n};\r\n\r\nexport const getTasksFromLocalStorage = () =>\r\n    JSON.parse(localStorage.getItem(localStorageTasks)) || [];\r\n\r\nexport const getHideDoneFromLocalStorage = () =>\r\n    JSON.parse(localStorage.getItem(localStorageHideDone)) || false;","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { getTasksFromLocalStorage, getHideDoneFromLocalStorage } from \"./tasksStateLocalStorage\";\r\n\r\nconst tasksSlice = createSlice({\r\n    name: 'tasks',\r\n    initialState: {\r\n        tasks: getTasksFromLocalStorage(),\r\n        hideDone: getHideDoneFromLocalStorage(),\r\n        loading: false,\r\n    },\r\n    reducers: {\r\n        addTask: ({ tasks }, { payload }) => {\r\n            tasks.push(payload);\r\n        },\r\n        toggleHideDone: state => {\r\n            state.hideDone = !state.hideDone;\r\n        },\r\n        toggleTaskDone: ({ tasks }, { payload }) => {\r\n            const index = tasks.findIndex(({ id }) => id === payload);\r\n            tasks[index].done = !tasks[index].done;\r\n        },\r\n        deleteAllTasks: state => {\r\n            state.tasks = [];\r\n        },\r\n        markAllAsDone: ({ tasks }) => {\r\n            tasks.forEach(task => task.done = true);\r\n        },\r\n        removeTask: ({ tasks }, { payload }) => {\r\n            const index = tasks.findIndex(({ id }) => id === payload);\r\n            tasks.splice(index, 1);\r\n        },\r\n        fetchExampleTasks: () => {\r\n\r\n        },\r\n        setTasks: (state, { payload: tasks }) => {\r\n            state.tasks = tasks;\r\n        },\r\n        setLoadingExampleTasks: (state, { payload }) => {\r\n            state.loading = payload;\r\n        }\r\n    },\r\n});\r\n\r\nexport const {\r\n    addTask,\r\n    toggleHideDone,\r\n    toggleTaskDone,\r\n    deleteAllTasks,\r\n    markAllAsDone,\r\n    removeTask,\r\n    fetchExampleTasks,\r\n    setTasks,\r\n    setLoadingExampleTasks,\r\n} = tasksSlice.actions;\r\n\r\nexport const selectTasksState = state => state.tasks;\r\n\r\nexport const selectTasks = state => selectTasksState(state).tasks;\r\nexport const selectHideDone = state => selectTasksState(state).hideDone;\r\nexport const selectIsEveryTaskDone = state => selectTasks(state).every(({ done }) => done);\r\nexport const selectAreTasksEmpty = state => selectTasks(state).length === 0;\r\nexport const selectLoading = state => selectTasksState(state).loading;\r\n\r\nexport const getTaskById = (state, taskId) => selectTasks(state).find(({ id }) => id === taskId);\r\n\r\nexport const selectTasksByQuery = (state, query) => {\r\n    const tasks = selectTasks(state);\r\n\r\n    if (!query || query.trim() === \"\") {\r\n        return tasks;\r\n    };\r\n\r\n    return selectTasks(state).filter(({ content }) => content.toUpperCase().includes(query.trim().toUpperCase()));\r\n};\r\n\r\nexport default tasksSlice.reducer;","import styled from \"styled-components\";\r\n\r\nconst Input = styled.input`\r\n    border: 2px solid ${({ theme }) => theme.colors.border};\r\n    padding: 10px;\r\n`;\r\n\r\nexport default Input;","import styled from \"styled-components\";\r\n\r\nexport const StyledForm = styled.form`\r\n    display: grid;\r\n    grid-template-columns: 1fr auto;\r\n    grid-gap: 10px;\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoints.mobileMax}px) {\r\n        grid-template-columns: 1fr;\r\n    }\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    cursor: pointer;\r\n    border: none;\r\n    color: white;\r\n    background-color: ${({ theme }) => theme.colors.button};\r\n    padding: 10px 15px;\r\n    transition: filter 0.3s, transform 0.3s;\r\n\r\n    @media (pointer: fine) {\r\n        &:hover {\r\n        filter: brightness(1.1);\r\n        }\r\n    }\r\n\r\n    &:active {\r\n        transform: scale(1.05);\r\n    }\r\n`;","import { nanoid } from \"@reduxjs/toolkit\";\r\nimport React, { useState, useRef } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { addTask } from \"../../tasksSlice\";\r\nimport Input from \"../Input\";\r\nimport { Button, StyledForm } from \"./styled\";\r\n\r\nconst Form = () => {\r\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n    const inputRef = useRef(null)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n        const trimmedNewTaskContent = newTaskContent.trim();\r\n\r\n        if (trimmedNewTaskContent) {\r\n\r\n            dispatch(addTask({\r\n                content: trimmedNewTaskContent,\r\n                done: false,\r\n                id: nanoid(),\r\n            }))\r\n\r\n            setNewTaskContent(\"\");\r\n            inputRef.current.focus()\r\n        };\r\n    };\r\n\r\n    return (\r\n        <StyledForm onSubmit={onFormSubmit}>\r\n            <Input\r\n                ref={inputRef}\r\n                placeholder=\"What should I do today?\"\r\n                value={newTaskContent}\r\n                onChange={({ target }) => setNewTaskContent(target.value)} />\r\n            <Button>\r\n                Add task\r\n            </Button>\r\n        </StyledForm>\r\n    )\r\n};\r\n\r\nexport default Form;","import { Link } from \"react-router-dom\";\r\nimport styled, { css } from \"styled-components\";\r\n\r\nexport const Tasks = styled.ul`\r\n    list-style: none;\r\n    margin: 0;\r\n    padding: 0;\r\n`;\r\n\r\nexport const Item = styled.li`\r\n    display: grid;\r\n    grid-template-columns: auto 1fr auto;\r\n    grid-gap: 20px;\r\n    padding: 20px;\r\n    align-items: center;\r\n    border-bottom: 1px solid ${({ theme }) => theme.colors.border};\r\n\r\n    ${({ hidden }) => hidden && css`\r\n        display: none;\r\n    `}\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    cursor: pointer;\r\n    border: none;\r\n    line-height: 50%;\r\n    padding: 5px;\r\n    background-color: inherit;\r\n    color: ${({ theme }) => theme.colors.button};\r\n    transition: color 0.2s, filter 0.2s;\r\n\r\n    ${({ toggleDone }) => toggleDone && css`\r\n        color: #fefefe;\r\n        background-color: ${({ theme }) => theme.colors.button};\r\n\r\n        &:hover {\r\n        filter: brightness(1.1);\r\n        }\r\n    `};\r\n\r\n    ${({ remove }) => remove && css`\r\n        color: crimson;\r\n    `}\r\n`;\r\n\r\nexport const Content = styled.div`\r\n    text-align: center;\r\n`;\r\n\r\nexport const ItemContent = styled.span`\r\n    overflow-wrap: anywhere;\r\n\r\n    ${({ done }) => done && css`\r\n        text-decoration: line-through;\r\n    `}\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoints.mobileMax}px) {\r\n        justify-self: center;\r\n    }\r\n`;\r\n\r\nexport const StyledLink = styled(Link)`\r\n    color: ${({ theme }) => theme.colors.links.task};\r\n    text-decoration: none;\r\n\r\n    @media (pointer: fine) {\r\n        &:hover { \r\n            border-bottom: 1px solid; \r\n        }\r\n    }\r\n`;","const searchQueryParamName = \"search\";\r\n\r\nexport default searchQueryParamName;","export const toTasks = () => \"/tasks\";\r\nexport const toAuthor = () => \"/author\";\r\nexport const toTask = ({ id } = { id: \":id\" }) => `/tasks/${id}`;","import { useHistory, useLocation } from \"react-router-dom\";\r\n\r\nexport const useQueryParameters = key => {\r\n    const location = useLocation();\r\n    const searchParams = new URLSearchParams(location.search);\r\n\r\n    return searchParams.get(key);\r\n};\r\n\r\nexport const useReplaceQueryParameters = () => {\r\n    const location = useLocation();\r\n    const history = useHistory();\r\n\r\n    return ({ key, value }) => {\r\n        const searchParams = new URLSearchParams(location.search);\r\n\r\n        if (value === undefined) {\r\n            searchParams.delete(key);\r\n        } else {\r\n            searchParams.set(key, value);\r\n        };\r\n\r\n        const newSearch = searchParams.toString();\r\n        history.push(`${location.pathname}?${newSearch}`);\r\n    };\r\n};","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { FaCheck, FaTimes } from \"react-icons/fa\";\r\nimport { ItemContent, Item, Button, Tasks, StyledLink, Content } from \"./styled\";\r\nimport { toggleTaskDone, removeTask, selectHideDone, selectTasksByQuery, selectAreTasksEmpty } from \"../../tasksSlice\";\r\nimport searchQueryParamName from \"../searchQueryParamName\";\r\nimport { toTask } from \"../../../../routes\";\r\nimport { useQueryParameters } from \"../queryParameters\";\r\n\r\nconst TaskList = () => {\r\n    const query = useQueryParameters(searchQueryParamName);\r\n\r\n    const tasks = useSelector(state => selectTasksByQuery(state, query));\r\n    const hideDone = useSelector(selectHideDone);\r\n    const areTasksEmpty = useSelector(selectAreTasksEmpty);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <>\r\n            {areTasksEmpty ?\r\n                <Content>\r\n                    The task list is currently empty. Enjoy your free time!\r\n                </Content>\r\n                :\r\n                <Tasks>\r\n                    {tasks.map(task => (\r\n                        <Item\r\n                            key={task.id}\r\n                            hidden={task.done && hideDone}\r\n                        >\r\n                            <Button\r\n                                toggleDone={task.done}\r\n                                onClick={() => dispatch(toggleTaskDone(task.id))}>\r\n                                <FaCheck title=\"check mark\" />\r\n                            </Button>\r\n                            <ItemContent done={task.done}>\r\n                                <StyledLink to={toTask({ id: task.id })}>{task.content}</StyledLink>\r\n                            </ItemContent>\r\n                            <Button\r\n                                remove\r\n                                onClick={() => dispatch(removeTask(task.id))}>\r\n                                <FaTimes title=\"cross mark\" />\r\n                            </Button>\r\n                        </Item>\r\n                    ))}\r\n                </Tasks>\r\n            }\r\n        </>\r\n    )\r\n};\r\n\r\nexport default TaskList;","import styled, { css } from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n    @media (max-width: ${({ theme }) => theme.breakpoints.mobileMax}px) {\r\n        display: flex;\r\n        flex-direction: column; \r\n    }\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    margin: 15px;\r\n    padding: 0;\r\n    align-self: center;\r\n    cursor: pointer;\r\n    border: none;\r\n    color: ${({ theme }) => theme.colors.button};\r\n    background-color: inherit;\r\n    transition: color 0.2s, filter 0.2s;\r\n\r\n    @media (pointer: fine) {\r\n        &:hover { \r\n            filter: brightness(1.2); \r\n        }\r\n    }\r\n\r\n    ${({ disabled }) => disabled && css`\r\n        color: ${({ theme }) => theme.colors.disabled};\r\n        cursor: default;\r\n    `}\r\n\r\n    ${({ loading }) => loading && css`\r\n        color: ${({ theme }) => theme.colors.disabled};\r\n        cursor: default;\r\n    `}\r\n`;\r\n\r\nexport const Loading = styled.span`\r\n    color: ${({ theme }) => theme.colors.disabled};\r\n    margin: 15px;\r\n    align-self: center;\r\n`;","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { Wrapper, Button, Loading } from \"./styled\";\r\nimport {\r\n    toggleHideDone,\r\n    deleteAllTasks,\r\n    markAllAsDone,\r\n    selectAreTasksEmpty,\r\n    selectHideDone,\r\n    selectIsEveryTaskDone,\r\n    fetchExampleTasks,\r\n    selectLoading\r\n} from \"../../tasksSlice\";\r\n\r\nconst Buttons = () => {\r\n    const areTasksEmpty = useSelector(selectAreTasksEmpty);\r\n    const hideDone = useSelector(selectHideDone);\r\n    const isEveryTaskDone = useSelector(selectIsEveryTaskDone);\r\n    const stateOfLoading = useSelector(selectLoading)\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <Wrapper>\r\n            {areTasksEmpty ?\r\n                <>\r\n                    {stateOfLoading ?\r\n                        <Loading>\r\n                            Loading...\r\n                        </Loading>\r\n                        :\r\n                        <Button\r\n                            onClick={() => dispatch(fetchExampleTasks())}\r\n                        >\r\n                            Download sample tasks\r\n                        </Button>\r\n                    }\r\n                </>\r\n                :\r\n                <>\r\n                    <Button\r\n                        onClick={() => dispatch(toggleHideDone())}\r\n                    >\r\n                        {hideDone ? \"Show done tasks\" : \"Hide done tasks\"}\r\n                    </Button>\r\n                    <Button\r\n                        onClick={() => dispatch(markAllAsDone())}\r\n                        disabled={isEveryTaskDone}\r\n                    >\r\n                        Mark all as done\r\n                    </Button>\r\n                    <Button\r\n                        onClick={() => dispatch(deleteAllTasks())}\r\n                    >\r\n                        Delete all\r\n                </Button>\r\n                </>\r\n            }\r\n        </Wrapper>\r\n    );\r\n};\r\n\r\nexport default Buttons;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n    display: grid;\r\n    grid-template-columns: 1fr;\r\n`;","import React from \"react\";\r\nimport Input from \"../Input\";\r\nimport searchQueryParamName from \"../searchQueryParamName\";\r\nimport { useQueryParameters, useReplaceQueryParameters } from \"../queryParameters\";\r\nimport { Wrapper } from \"./styled\";\r\n\r\nconst Search = () => {\r\n    const query = useQueryParameters(searchQueryParamName);\r\n    const replaceQueryParameters = useReplaceQueryParameters();\r\n\r\n    const onInputChange = ({ target }) => {\r\n        replaceQueryParameters({\r\n            key: searchQueryParamName,\r\n            value: target.value.trim() !== \"\" ? target.value : undefined,\r\n        });\r\n    };\r\n\r\n    return (\r\n        <Wrapper>\r\n            <Input\r\n                placeholder=\"Filter tasks\"\r\n                value={query || \"\"}\r\n                onChange={onInputChange}\r\n            />\r\n        </Wrapper>\r\n    );\r\n};\r\n\r\nexport default Search;","import React from \"react\";\r\nimport Form from \"./Form\";\r\nimport TaskList from \"./TaskList\";\r\nimport Buttons from \"./Buttons\";\r\nimport Section from \"../../../common/Section\";\r\nimport Header from \"../../../common/Header\";\r\nimport Container from \"../../../common/Container\";\r\nimport Search from \"./Search\";\r\n\r\nconst TasksPage = () => (\r\n    <Container>\r\n        <Header title=\"To-do List\" />\r\n        <Section\r\n            title=\"Add new task\"\r\n            body={<Form />}\r\n        />\r\n        <Section\r\n            title=\"Search\"\r\n            body={<Search />}\r\n        />\r\n        <Section\r\n            title=\"Task List\"\r\n            body={<TaskList />}\r\n            extraHeaderContent={<Buttons />}\r\n        />\r\n    </Container>\r\n);\r\n\r\nexport default TasksPage;\r\n","import React from \"react\";\r\nimport Section from \"../../../common/Section\";\r\nimport Header from \"../../../common/Header\";\r\nimport Container from \"../../../common/Container\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { getTaskById, setTasks } from \"../tasksSlice\";\r\n\r\nconst TaskPage = () => {\r\n    const { id } = useParams();\r\n    const task = useSelector(state => getTaskById(state, id), (setTasks));\r\n\r\n    return (\r\n        <Container>\r\n            <Header title=\"Task details\" />\r\n            <Section\r\n                title={task ? task.content : \"There is no such task on the list, sorry!\"}\r\n                body={task && (\r\n                    <>\r\n                        <strong>Completed:</strong> {task.done ? \"Yes\" : \"No\"}\r\n                    </>\r\n                )\r\n                }\r\n            />\r\n        </Container>\r\n    )\r\n};\r\n\r\nexport default TaskPage;","import { NavLink } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\n\r\nconst activeClassName = \"active\";\r\n\r\nexport const StyledNavLink = styled(NavLink).attrs(() => ({\r\n    activeClassName,\r\n}))`\r\n    color: ${({ theme }) => theme.colors.links.navigation};\r\n    text-decoration: none;\r\n\r\n    &.${activeClassName} {\r\n        font-weight: bold;\r\n    }\r\n\r\n    @media (pointer: fine) {\r\n        &:hover { \r\n            border-bottom: 1px solid; \r\n        }\r\n}\r\n`;\r\n\r\nexport const List = styled.ul`\r\n    display: flex;\r\n    justify-content: center;\r\n    list-style-type: none;\r\n    margin: 0;\r\n    padding: 0;\r\n`;\r\n\r\nexport const ListItem = styled.li`\r\n    padding: 20px;\r\n    font-size: 18px;\r\n`;","import React from \"react\";\r\nimport { toAuthor, toTasks } from \"../routes\";\r\nimport { List, ListItem, StyledNavLink } from \"./styled\";\r\n\r\nconst Navigation = () => (\r\n    <nav>\r\n        <List>\r\n            <ListItem>\r\n                <StyledNavLink exact to={toTasks()}>Tasks</StyledNavLink>\r\n            </ListItem>\r\n            <ListItem>\r\n                <StyledNavLink to={toAuthor()}>Author</StyledNavLink>\r\n            </ListItem>\r\n        </List>\r\n    </nav>\r\n);\r\n\r\nexport default Navigation;","import React from \"react\";\r\nimport { HashRouter, Redirect, Route, Switch } from \"react-router-dom\";\r\nimport AuthorPage from \"./features/author/AuthorPage\";\r\nimport TasksPage from \"./features/tasks/TasksPage/index\";\r\nimport TaskPage from \"./features/tasks/TaskPage/index\";\r\nimport Navigation from \"./Navigation\";\r\nimport { toAuthor, toTask, toTasks } from \"./routes\";\r\n\r\nconst App = () => (\r\n    <HashRouter>\r\n        <Navigation />\r\n        <Switch>\r\n            <Route path={toTask()}>\r\n                <TaskPage />\r\n            </Route>\r\n            <Route path={toTasks()}>\r\n                <TasksPage />\r\n            </Route>\r\n            <Route path={toAuthor()}>\r\n                <AuthorPage />\r\n            </Route>\r\n            <Route>\r\n                <Redirect to={toTasks()} />\r\n            </Route>\r\n        </Switch>\r\n    </HashRouter>\r\n);\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    html {\r\n        box-sizing: border-box;\r\n        min-height: 100%;\r\n        background: ${({ theme }) => theme.colors.mainBackground};\r\n    }\r\n\r\n    *,\r\n    *::before,\r\n    *::after {\r\n        box-sizing: inherit;\r\n    }\r\n\r\n    body {\r\n        font-family: 'Montserrat', sans-serif;\r\n    }\r\n`;","export const getExampleTasks = async () => {\r\n    const response = await fetch(\"/to-do-list-react/exampleTasks.json\")\r\n\r\n    if (!response.ok) {\r\n        new Error(response.statusText);\r\n    }\r\n\r\n    return await response.json();\r\n};","import { takeLatest, call, put, takeEvery, select, delay } from \"redux-saga/effects\";\r\nimport { getExampleTasks } from \"./getExampleTasks\";\r\nimport { saveTasksStateInLocalStorage } from \"./tasksStateLocalStorage\";\r\nimport { fetchExampleTasks, selectTasksState, setTasks, setLoadingExampleTasks } from \"./tasksSlice\";\r\n\r\nfunction* fetchExampleTasksHandler() {\r\n    try {\r\n        yield put(setLoadingExampleTasks(true));\r\n        yield delay(350);\r\n        const exampleTasks = yield call(getExampleTasks);\r\n        yield put(setTasks(exampleTasks));\r\n    } catch (error) {\r\n        yield call(alert, \"Something went wrong!\")\r\n    } finally {\r\n        yield put(setLoadingExampleTasks(false));\r\n    };\r\n};\r\n\r\nfunction* saveTasksStateInLocalStorageHandler() {\r\n    const { tasks, hideDone } = yield select(selectTasksState);\r\n    yield call(saveTasksStateInLocalStorage, tasks, hideDone);\r\n};\r\n\r\nexport function* tasksSaga() {\r\n    yield takeLatest(fetchExampleTasks.type, fetchExampleTasksHandler);\r\n    yield takeEvery(\"*\", saveTasksStateInLocalStorageHandler);\r\n};","import { all } from \"redux-saga/effects\";\r\nimport { tasksSaga } from \"./features/tasks/tasksSaga\";\r\n\r\nexport default function* rootSaga() {\r\n    yield all([\r\n        tasksSaga(),\r\n    ])\r\n};","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport tasksReducer from \"./features/tasks/tasksSlice\";\r\nimport rootSaga from \"./rootSaga\";\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        tasks: tasksReducer,\r\n    },\r\n    middleware: [sagaMiddleware]\r\n});\r\n\r\nsagaMiddleware.run(rootSaga);\r\n\r\nexport default store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { ThemeProvider } from \"styled-components\";\r\nimport { theme } from \"./App/theme\";\r\nimport { GlobalStyle } from \"./App/GlobalStyle\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./App/store\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <ThemeProvider theme={theme}>\r\n                <GlobalStyle />\r\n                <App />\r\n            </ThemeProvider>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","export const theme = {\r\n    colors: {\r\n        header: \"hsl(0, 0%, 96%)\",\r\n        subHeader: \"hsl(180, 100%, 25%)\",\r\n        button: \"hsl(180, 100%, 25%)\",\r\n        disabled: \"hsl(0, 0%, 67%)\",\r\n        border: \"hsl(270, 6%, 93%)\",\r\n        mainBackground: \"linear-gradient(0deg, rgba(246,246,246,1) 40%, rgba(0,128,128,1) 100%)\",\r\n        sectionBackground: \"hsl(0, 0%, 100%)\",\r\n\r\n        links: {\r\n            navigation: \"hsl(0, 0%, 100%)\",\r\n            task: \"hsl(180, 100%, 25%)\",\r\n        },\r\n    },\r\n\r\n    breakpoints: {\r\n        mobileMax: 767,\r\n    },\r\n};"],"sourceRoot":""}